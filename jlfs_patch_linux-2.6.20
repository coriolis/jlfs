diff --git a/fs/Kconfig b/fs/Kconfig
index 8cd2417..5bec9b4 100644
--- a/fs/Kconfig
+++ b/fs/Kconfig
@@ -628,6 +628,16 @@ config FUSE_FS
 	  If you want to develop a userspace FS, or if you want to use
 	  a filesystem based on FUSE, answer Y or M.
 
+config JLFS
+	tristate "JSLinux Filesystem support"
+	help
+	  JLFS is a thin shared-folder filesystem used only on JSLinux, where Linux
+	  runs inside the browser on a Javascript x86 emulator. It is used to
+	  expose files on the host via the HTML5 File API. It needs a companion
+	  "hypervisor-side" Javascript module to bridge HTML5 and this driver.
+
+	  If you want to run JSLinux, you might want to answer Y or M.
+
 config GENERIC_ACL
 	bool
 	select FS_POSIX_ACL
diff --git a/fs/Makefile b/fs/Makefile
index b9ffa63..008517c 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -111,6 +111,7 @@ obj-$(CONFIG_9P_FS)		+= 9p/
 obj-$(CONFIG_AFS_FS)		+= afs/
 obj-$(CONFIG_BEFS_FS)		+= befs/
 obj-$(CONFIG_HOSTFS)		+= hostfs/
+obj-$(CONFIG_JLFS)			+= jlfs/
 obj-$(CONFIG_HPPFS)		+= hppfs/
 obj-$(CONFIG_DEBUG_FS)		+= debugfs/
 obj-$(CONFIG_OCFS2_FS)		+= ocfs2/
diff --git a/fs/jlfs/Makefile b/fs/jlfs/Makefile
new file mode 100644
index 0000000..28c78e7
--- /dev/null
+++ b/fs/jlfs/Makefile
@@ -0,0 +1,4 @@
+jlfs-y := jlfs_kern.o jlfs_backend.o
+
+obj-y :=
+obj-$(CONFIG_JLFS) += jlfs.o
diff --git a/fs/jlfs/jlfs.h b/fs/jlfs/jlfs.h
new file mode 100644
index 0000000..a92f2d1
--- /dev/null
+++ b/fs/jlfs/jlfs.h
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2011 Coriolis Technologies Pvt Ltd
+ * Licensed under GPLv2
+ *
+ * Derived from hostfs, which is Copyright (C) Jeff Dike (jdike@karaya.com)
+ *
+ */
+
+#ifndef __FS_JLFS
+#define __FS_JLFS
+
+#include <linux/stddef.h>
+#include <linux/interrupt.h>
+
+/*
+ * Backend definitions
+ */
+
+#define JLFS_IO_BASE 0x180
+#define JLFS_IO_READ_STATUS (io_port + 4)
+#define JLFS_IO_WRITE_CMD (io_port + 4)
+#define JLFS_IO_WRITE_REQUESTBUF (io_port + 8)
+#define JLFS_IO_WRITE_RESULTBUF (io_port + 12)
+
+#define JLFS_IRQ 5
+#define JLFS_SUPER_MAGIC 0xf1c0ffee
+
+
+/* Commands */
+
+#define JLFS_CMD_IRQACK 0x1
+#define JLFS_CMD_TEST 0x2
+#define JLFS_CMD_READ 0x3
+#define JLFS_CMD_WRITE 0x4
+#define JLFS_CMD_READDIR 0x5
+#define JLFS_CMD_STAT 0x6
+
+/* Status register values */
+
+#define JLFS_STATUS_OK 0xa0a0
+#define JLFS_STATUS_UNKNOWN_CMD 0xa0a1
+#define JLFS_STATUS_NOK 0xa0a2
+
+/* FS definitions */
+#define JLFS_MAXPATHLEN 256
+#define JLFS_ROOTINO 65535
+#define JLFS_BLKSIZE 1024
+#define JLFS_MAX_FILESIZE ((1ULL << 36) - 1)
+
+
+#define JLFS_STAT_SET(attr, value) do {if (attr) { *(attr) = value; }} while (0)
+/* These are exactly the same definitions as in fs.h, but the names are
+ * changed so that this file can be included in both kernel and user files.
+ */
+
+#define JLFS_ATTR_MODE	1
+#define JLFS_ATTR_UID 	2
+#define JLFS_ATTR_GID 	4
+#define JLFS_ATTR_SIZE	8
+#define JLFS_ATTR_ATIME	16
+#define JLFS_ATTR_MTIME	32
+#define JLFS_ATTR_CTIME	64
+#define JLFS_ATTR_ATIME_SET	128
+#define JLFS_ATTR_MTIME_SET	256
+
+/* These two are unused by jlfs. */
+#define JLFS_ATTR_FORCE	512	/* Not a change, but a change it */
+#define JLFS_ATTR_ATTR_FLAG	1024
+
+extern int init_jlfs_backend(void);
+extern void deinit_jlfs_backend(void);
+extern irqreturn_t jlfs_interrupt(int irq, void *dev_id);
+extern int stat_file(const char *path, unsigned long long *inode_out,
+		     int *mode_out, int *nlink_out, int *uid_out, int *gid_out,
+		     unsigned long long *size_out, struct timespec *atime_out,
+		     struct timespec *mtime_out, struct timespec *ctime_out,
+		     int *blksize_out, unsigned long long *blocks_out);
+extern int access_file(char *path, int r, int w, int x);
+extern int open_file(char *path, int r, int w, int append);
+extern int file_type(const char *path, int *maj, int *min);
+extern void *open_dir(char *path, int *err_out);
+extern int read_dir(void *stream, char *name, unsigned long long *pos,
+		      unsigned long long *ino_out, int *len_out);
+extern void close_file(void *stream);
+extern void close_dir(void *stream);
+extern int read_file(char *name, int fd, unsigned long long *offset, void *page, int len);
+extern int lseek_file(int fd, long long offset, int whence);
+extern int do_statfs(char *root, long *bsize_out, long long *blocks_out,
+		     long long *bfree_out, long long *bavail_out,
+		     long long *files_out, long long *ffree_out,
+		     void *fsid_out, int fsid_size, long *namelen_out,
+		     long *spare_out);
+
+#endif
+
+/*
+ * Overrides for Emacs so that we follow Linus's tabbing style.
+ * Emacs will notice this stuff at the end of the file and automatically
+ * adjust the settings for this buffer only.  This must remain at the end
+ * of the file.
+ * ---------------------------------------------------------------------------
+ * Local variables:
+ * c-file-style: "linux"
+ * End:
+ */
diff --git a/fs/jlfs/jlfs_backend.c b/fs/jlfs/jlfs_backend.c
new file mode 100644
index 0000000..c4acde7
--- /dev/null
+++ b/fs/jlfs/jlfs_backend.c
@@ -0,0 +1,376 @@
+/*
+ * Copyright (C) 2011 Coriolis Technologies Pvt Ltd
+ * Licensed under GPLv2
+ */
+
+#include <linux/stddef.h>
+#include <linux/fs.h>
+#include <linux/module.h>
+#include <linux/ioport.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/pagemap.h>
+#include <linux/blkdev.h>
+#include <linux/list.h>
+#include <linux/statfs.h>
+#include <linux/stat.h>
+#include <linux/kdev_t.h>
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include "jlfs.h"
+
+/* Request and result buffers, 1 page each */
+static unsigned long requestbuf = 0;
+static unsigned long resultbuf = 0;
+
+DECLARE_MUTEX(jl_sem);
+DECLARE_WAIT_QUEUE_HEAD(jl_wq);
+
+static int intr_state = 0;
+static int cmd_status = 0;
+
+static int io_port = JLFS_IO_BASE;
+static int irq = JLFS_IRQ;
+
+module_param(io_port, int, 0);
+MODULE_PARM_DESC(io_port, "IO port");
+
+module_param(irq, int, 0);
+MODULE_PARM_DESC(irq, "IRQ number");
+
+int read_file(char *name, int fd, unsigned long long *offset, void *page, int len)
+{
+	int n, found;
+    int ret = -EIO;
+    unsigned long long addr;
+
+    //addr = page_to_phys(page);
+    addr = virt_to_phys(page);
+
+    if (down_interruptible(&jl_sem)) {
+        return -ERESTARTSYS;
+    }
+    intr_state = 0;
+    snprintf((char *)requestbuf, PAGE_SIZE, "{\"file\":\"%s\", \"fd\":%d, \"addr\":%lld, \"offset\":%lld, \"len\":%d}", name, fd, addr, *offset, len);
+    outl(JLFS_CMD_READ, JLFS_IO_WRITE_CMD);
+    wait_event_interruptible(jl_wq, (intr_state == 1));
+    if (cmd_status != JLFS_STATUS_OK) {
+        printk(KERN_INFO "jlfs: read: status %d", cmd_status);
+        ret = -cmd_status;
+        goto out;
+    }
+
+    found = sscanf((char *)resultbuf, " { \"read\" : %d } ", &n);
+    if (found != 1) {
+        printk(KERN_INFO "jlfs: read: didn't get expected results");
+        goto out;
+    }
+    *offset += n;
+    ret = n;
+
+out:
+    up(&jl_sem);
+    return ret;
+}
+
+int read_dir(void *stream, char *name, unsigned long long *pos,
+	       unsigned long long *ino_out, int *len_out)
+{
+    unsigned long long ino;
+    int ret = -EFAULT;
+    int found;
+    int i;
+
+    if (down_interruptible(&jl_sem)) {
+        return -ERESTARTSYS;
+    }
+    intr_state = 0;
+    snprintf((char *)requestbuf, PAGE_SIZE, "{\"dir\": \"%s\", \"pos\": %lld}",
+        (char *)stream, *pos);
+    outl(JLFS_CMD_READDIR, JLFS_IO_WRITE_CMD);
+    wait_event_interruptible(jl_wq, (intr_state == 1));
+    if (cmd_status != JLFS_STATUS_OK) {
+        printk(KERN_INFO "jlfs: readdir: status %d", cmd_status);
+        ret = -cmd_status;
+        goto out;
+    }
+
+    found = sscanf((char *)resultbuf, " { \"inode\" : %lld , \"name\" : \"%255s\" } ", &ino, name);
+    for (i = 0; i < JLFS_MAXPATHLEN && name[i]; i++) {
+        if (name[i] == '/') {
+            name[i] = ' ';
+        } else if (name[i] == '"') {
+            name[i] = 0;
+            break;
+        }
+    }
+    //printk(KERN_INFO "jlfs: readdir cmd result: %s found %d inode %lld name #%s#", (char *)resultbuf, found, ino, name);
+    if (found != 2) {
+        printk(KERN_INFO "jlfs: readdir: didn't get expected results");
+        goto out;
+    }
+    if (ino == 0) {
+        ret = -ENOENT;
+        goto out;
+    }
+    ret = 0;
+    *ino_out = ino;
+    (*pos)++;
+    *len_out = strlen(name);
+out:
+    up(&jl_sem);
+    return ret;
+}
+
+int stat_file(const char *path, unsigned long long *inode_out, int *mode_out,
+	      int *nlink_out, int *uid_out, int *gid_out,
+	      unsigned long long *size_out, struct timespec *atime_out,
+	      struct timespec *mtime_out, struct timespec *ctime_out,
+	      int *blksize_out, unsigned long long *blocks_out)
+{
+    unsigned long long ino;
+    long long size;
+    int mtime_sec, mtime_nsec, found;
+    int err = -ENOENT;
+
+    //printk(KERN_INFO "jlfs: stat_file %s", path);
+
+    if (strcmp(path, "/") == 0) {
+        JLFS_STAT_SET(inode_out, JLFS_ROOTINO); 
+        JLFS_STAT_SET(mode_out, S_IFDIR | 0755);
+        JLFS_STAT_SET(nlink_out, 2);
+        JLFS_STAT_SET(uid_out, 0);
+        JLFS_STAT_SET(gid_out, 0);
+        JLFS_STAT_SET(size_out, 1024);
+        if (atime_out) {
+            atime_out->tv_sec = 0;
+            atime_out->tv_nsec = 0;
+        }
+        if (mtime_out) {
+            mtime_out->tv_sec = 0;
+            mtime_out->tv_nsec = 0;
+        }
+        if (ctime_out) {
+            ctime_out->tv_sec = 0;
+            ctime_out->tv_nsec = 0;
+        }
+        JLFS_STAT_SET(blksize_out, JLFS_BLKSIZE);
+        JLFS_STAT_SET(blocks_out, 1);
+        return 0;
+    }
+            
+    if (down_interruptible(&jl_sem)) {
+        return -ERESTARTSYS;
+    }
+    intr_state = 0;
+    snprintf((char *)requestbuf, PAGE_SIZE, "{\"file\": \"%s\"}", path);
+    outl(JLFS_CMD_STAT, JLFS_IO_WRITE_CMD);
+    wait_event_interruptible(jl_wq, (intr_state == 1));
+    if (cmd_status != JLFS_STATUS_OK) {
+        printk(KERN_INFO "jlfs: stat: status %d", cmd_status);
+        err = -cmd_status;
+        goto out;
+    }
+
+    found = sscanf((char *)resultbuf, " { \"inode\" : %lld , \"size\" : %lld , \"mtime_sec\" : %d , \"mtime_nsec\" : %d } ", &ino, &size, &mtime_sec, &mtime_nsec);
+    if (found != 4) {
+        printk(KERN_INFO "jlfs: stat: didn't get expected results");
+        goto out;
+    }
+    JLFS_STAT_SET(inode_out, ino); 
+    JLFS_STAT_SET(mode_out, S_IFREG | 0644);
+    JLFS_STAT_SET(nlink_out, 1);
+    JLFS_STAT_SET(uid_out, 0);
+    JLFS_STAT_SET(gid_out, 0);
+    JLFS_STAT_SET(size_out, size);
+    if (atime_out) {
+        atime_out->tv_sec = mtime_sec;
+        atime_out->tv_nsec = mtime_nsec;
+    }
+    if (mtime_out) {
+        mtime_out->tv_sec = mtime_sec;
+        mtime_out->tv_nsec = mtime_nsec;
+    }
+    if (ctime_out) {
+        ctime_out->tv_sec = mtime_sec;
+        ctime_out->tv_nsec = mtime_nsec;
+    }
+    JLFS_STAT_SET(blksize_out, JLFS_BLKSIZE);
+    JLFS_STAT_SET(blocks_out, size / JLFS_BLKSIZE);
+    err = 0;
+out:
+    up(&jl_sem);
+	return err;
+}
+
+int access_file(char *path, int r, int w, int x)
+{
+    return 0;
+}
+
+int open_file(char *path, int r, int w, int append)
+{
+    unsigned long long ino;
+    long long size;
+    int mtime_sec, mtime_nsec, found;
+    int ret = -ENOENT;
+            
+    //printk(KERN_INFO "jlfs: open_file %s", path);
+
+    if (down_interruptible(&jl_sem)) {
+        return -ERESTARTSYS;
+    }
+    intr_state = 0;
+    snprintf((char *)requestbuf, PAGE_SIZE, "{\"file\": \"%s\"}", path);
+    outl(JLFS_CMD_STAT, JLFS_IO_WRITE_CMD);
+    wait_event_interruptible(jl_wq, (intr_state == 1));
+    if (cmd_status != JLFS_STATUS_OK) {
+        printk(KERN_INFO "jlfs: stat: status %d", cmd_status);
+        goto out;
+    }
+
+    found = sscanf((char *)resultbuf, " { \"inode\" : %lld , \"size\" : %lld , \"mtime_sec\" : %d , \"mtime_nsec\" : %d } ", &ino, &size, &mtime_sec, &mtime_nsec);
+    if (found != 4) {
+        printk(KERN_INFO "jlfs: stat: didn't get expected results");
+        goto out;
+    }
+    //printk(KERN_INFO "jlfs: open_file got ino %d", (int)ino);
+    ret = (int)ino;
+    
+out:
+    up(&jl_sem);
+    return ret;
+}
+
+void *open_dir(char *path, int *err_out)
+{
+    //printk(KERN_INFO "jlfs: open_dir %s", path);
+    if (strcmp(path, "/")) {
+        *err_out = ENOENT;
+        return NULL;
+    } else {
+        return "/";
+    }
+}
+
+int lseek_file(int fd, long long offset, int whence)
+{
+#if 0
+	int ret;
+
+	ret = lseek64(fd, offset, whence);
+	if(ret < 0)
+		return(-errno);
+#endif
+	return(0);
+}
+
+int test_cmd(void)
+{
+    if (down_interruptible(&jl_sem)) {
+        return -ERESTARTSYS;
+    }
+    intr_state = 0;
+    sprintf((char *)requestbuf, "JLFS Test Command");
+    cmd_status = inl(JLFS_IO_READ_STATUS);
+    outl(JLFS_CMD_TEST, JLFS_IO_WRITE_CMD);
+    wait_event_interruptible(jl_wq, (intr_state == 1));
+    printk(KERN_INFO "jlfs: test cmd result: %s", (char *)resultbuf);
+    up(&jl_sem);
+    return 1;
+}
+
+irqreturn_t jlfs_interrupt(int irq, void *dev_id)
+{
+    intr_state = 1;
+    cmd_status = inl(JLFS_IO_READ_STATUS);
+    outl(JLFS_CMD_IRQACK, JLFS_IO_WRITE_CMD);
+    wake_up_interruptible(&jl_wq);
+    return 1;
+}
+
+int init_jlfs_backend(void)
+{
+    printk(KERN_DEBUG "init_jlfs_backend");
+    if (!request_region(JLFS_IO_BASE, 16, "jlfs")) {
+        printk(KERN_INFO "jlfs: request region failed");
+        return -1;
+    }
+    if (request_irq(irq, jlfs_interrupt, 0, "jlfs", &intr_state)) {
+        printk(KERN_INFO "jlfs: request_irq failed");
+        return -1;
+    }
+    if (inl(JLFS_IO_BASE) != JLFS_SUPER_MAGIC) {
+        printk(KERN_INFO "No coffee, no workee");
+        return -1;
+    }
+    outl(0xdeadbeef, JLFS_IO_BASE);
+
+    requestbuf = __get_free_page(GFP_KERNEL);
+    resultbuf = __get_free_page(GFP_KERNEL);
+    if (!requestbuf || !resultbuf) {
+        printk(KERN_INFO "jlfs: Could not allocate buffers");
+        return -1;
+    }
+    //printk("jlfs: requestbuf: %p resultbuf %p", virt_to_phys((void *)requestbuf),
+     //   virt_to_phys((void *)resultbuf));
+    outl(virt_to_phys((void *)requestbuf), JLFS_IO_WRITE_REQUESTBUF);
+    outl(virt_to_phys((void *)resultbuf), JLFS_IO_WRITE_RESULTBUF);
+
+    test_cmd();
+    return 0;
+}
+
+void deinit_jlfs_backend(void)
+{
+    if (requestbuf) {
+        free_page(requestbuf);
+        requestbuf = 0;
+    }
+    if (resultbuf) {
+        free_page(resultbuf);
+        resultbuf = 0;
+    }
+    outl(JLFS_IO_BASE, 0x600db1e);
+
+    return;
+}
+
+int do_statfs(char *root, long *bsize_out, long long *blocks_out,
+	      long long *bfree_out, long long *bavail_out,
+	      long long *files_out, long long *ffree_out,
+	      void *fsid_out, int fsid_size, long *namelen_out,
+	      long *spare_out)
+{
+#if 0
+	struct statfs64 buf;
+	int err;
+
+	err = statfs64(root, &buf);
+	if(err < 0) return(-errno);
+	*bsize_out = buf.f_bsize;
+	*blocks_out = buf.f_blocks;
+	*bfree_out = buf.f_bfree;
+	*bavail_out = buf.f_bavail;
+	*files_out = buf.f_files;
+	*ffree_out = buf.f_ffree;
+	memcpy(fsid_out, &buf.f_fsid,
+	       sizeof(buf.f_fsid) > fsid_size ? fsid_size :
+	       sizeof(buf.f_fsid));
+	*namelen_out = buf.f_namelen;
+	spare_out[0] = buf.f_spare[0];
+	spare_out[1] = buf.f_spare[1];
+	spare_out[2] = buf.f_spare[2];
+	spare_out[3] = buf.f_spare[3];
+	spare_out[4] = buf.f_spare[4];
+#endif
+	return(0);
+}
+
+void close_file(void *stream)
+{
+}
+
+void close_dir(void *stream)
+{
+}
diff --git a/fs/jlfs/jlfs_kern.c b/fs/jlfs/jlfs_kern.c
new file mode 100644
index 0000000..777df96
--- /dev/null
+++ b/fs/jlfs/jlfs_kern.c
@@ -0,0 +1,566 @@
+/*
+ * Copyright (C) 2011 Coriolis Technologies Pvt Ltd
+ *
+ * Derived from hostfs, which is Copyright (C) Jeff Dike (jdike@karaya.com)
+ *
+ * Licensed under GPLv2
+ */
+
+#include <linux/stddef.h>
+#include <linux/fs.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/pagemap.h>
+#include <linux/blkdev.h>
+#include <linux/list.h>
+#include <linux/statfs.h>
+#include <linux/kdev_t.h>
+#include <asm/uaccess.h>
+#include "jlfs.h"
+
+struct jlfs_inode_info {
+	char *host_filename;
+	int fd;
+	int mode;
+	struct inode vfs_inode;
+};
+
+static inline struct jlfs_inode_info *JLFS_I(struct inode *inode)
+{
+	return(list_entry(inode, struct jlfs_inode_info, vfs_inode));
+}
+
+#define FILE_JLFS_I(file) JLFS_I((file)->f_path.dentry->d_inode)
+
+int jlfs_d_delete(struct dentry *dentry)
+{
+	return(1);
+}
+
+struct dentry_operations jlfs_dentry_ops = {
+	.d_delete		= jlfs_d_delete,
+};
+
+/* Changed in jlfs_args before the kernel starts running */
+static char *root_ino = "/";
+static int append = 0;
+
+
+static struct inode_operations jlfs_iops;
+static struct inode_operations jlfs_dir_iops;
+
+static char *dentry_name(struct dentry *dentry, int extra)
+{
+	struct dentry *parent;
+	char *root, *name;
+	int len;
+
+	len = 0;
+	parent = dentry;
+	while(parent->d_parent != parent){
+		len += parent->d_name.len + 1;
+		parent = parent->d_parent;
+	}
+
+	root = JLFS_I(parent->d_inode)->host_filename;
+	len += strlen(root);
+	name = kmalloc(len + extra + 1, GFP_KERNEL);
+	if(name == NULL) return(NULL);
+
+	name[len] = '\0';
+	parent = dentry;
+	while(parent->d_parent != parent){
+		len -= parent->d_name.len + 1;
+		name[len] = '/';
+		strncpy(&name[len + 1], parent->d_name.name,
+			parent->d_name.len);
+		parent = parent->d_parent;
+	}
+	strncpy(name, root, strlen(root));
+	return(name);
+}
+
+static char *inode_name(struct inode *ino, int extra)
+{
+	struct dentry *dentry;
+
+	dentry = list_entry(ino->i_dentry.next, struct dentry, d_alias);
+	return(dentry_name(dentry, extra));
+}
+
+static int read_name(struct inode *ino, char *name)
+{
+	/* The non-int inode fields are copied into ints by stat_file and
+	 * then copied into the inode because passing the actual pointers
+	 * in and having them treated as int * breaks on big-endian machines
+	 */
+	int err;
+	int i_mode, i_nlink, i_blksize;
+	unsigned long long i_size;
+	unsigned long long i_ino;
+	unsigned long long i_blocks;
+
+	err = stat_file(name, &i_ino, &i_mode, &i_nlink, &ino->i_uid,
+			&ino->i_gid, &i_size, &ino->i_atime, &ino->i_mtime,
+			&ino->i_ctime, &i_blksize, &i_blocks);
+	if(err)
+		return(err);
+
+	ino->i_ino = i_ino;
+	ino->i_mode = i_mode;
+	ino->i_nlink = i_nlink;
+	ino->i_size = i_size;
+	ino->i_blocks = i_blocks;
+	return(0);
+}
+
+static int read_inode(struct inode *ino)
+{
+	char *name;
+	int err = 0;
+
+	/* Unfortunately, we are called from iget() when we don't have a dentry
+	 * allocated yet.
+	 */
+	if(list_empty(&ino->i_dentry))
+		goto out;
+
+	err = -ENOMEM;
+	name = inode_name(ino, 0);
+	if(name == NULL)
+		goto out;
+	err = read_name(ino, name);
+	kfree(name);
+ out:
+	return(err);
+}
+
+int jlfs_statfs(struct dentry *dentry, struct kstatfs *sf)
+{
+	/* do_statfs uses struct statfs64 internally, but the linux kernel
+	 * struct statfs still has 32-bit versions for most of these fields,
+	 * so we convert them here
+	 */
+	int err;
+	long long f_blocks;
+	long long f_bfree;
+	long long f_bavail;
+	long long f_files;
+	long long f_ffree;
+
+	err = do_statfs(JLFS_I(dentry->d_sb->s_root->d_inode)->host_filename,
+			&sf->f_bsize, &f_blocks, &f_bfree, &f_bavail, &f_files,
+			&f_ffree, &sf->f_fsid, sizeof(sf->f_fsid),
+			&sf->f_namelen, sf->f_spare);
+	if(err) return(err);
+	sf->f_blocks = f_blocks;
+	sf->f_bfree = f_bfree;
+	sf->f_bavail = f_bavail;
+	sf->f_files = f_files;
+	sf->f_ffree = f_ffree;
+	sf->f_type = JLFS_SUPER_MAGIC;
+	return(0);
+}
+
+static struct inode *jlfs_alloc_inode(struct super_block *sb)
+{
+	struct jlfs_inode_info *hi;
+
+	hi = kmalloc(sizeof(*hi), GFP_KERNEL);
+	if(hi == NULL)
+		return(NULL);
+
+	*hi = ((struct jlfs_inode_info) { .host_filename	= NULL,
+					    .fd			= -1,
+					    .mode		= 0 });
+	inode_init_once(&hi->vfs_inode);
+	return(&hi->vfs_inode);
+}
+
+static void jlfs_delete_inode(struct inode *inode)
+{
+	truncate_inode_pages(&inode->i_data, 0);
+	if(JLFS_I(inode)->fd != -1) {
+		close_file(&JLFS_I(inode)->fd);
+		JLFS_I(inode)->fd = -1;
+	}
+	clear_inode(inode);
+}
+
+static void jlfs_destroy_inode(struct inode *inode)
+{
+	kfree(JLFS_I(inode)->host_filename);
+
+	/*XXX: This should not happen, probably. The check is here for
+	 * additional safety.*/
+	if(JLFS_I(inode)->fd != -1) {
+		close_file(&JLFS_I(inode)->fd);
+		printk(KERN_DEBUG "Closing host fd in .destroy_inode\n");
+	}
+
+	kfree(JLFS_I(inode));
+}
+
+static void jlfs_read_inode(struct inode *inode)
+{
+	read_inode(inode);
+}
+
+static struct super_operations jlfs_sbops = {
+	.alloc_inode	= jlfs_alloc_inode,
+	.drop_inode	= generic_delete_inode,
+	.delete_inode   = jlfs_delete_inode,
+	.destroy_inode	= jlfs_destroy_inode,
+	.read_inode	= jlfs_read_inode,
+	.statfs		= jlfs_statfs,
+};
+
+int jlfs_readdir(struct file *file, void *ent, filldir_t filldir)
+{
+	void *dir;
+	char *name;
+	unsigned long long next, ino;
+	int error, len;
+
+	name = dentry_name(file->f_path.dentry, 0);
+	if(name == NULL) return(-ENOMEM);
+	dir = open_dir(name, &error);
+	kfree(name);
+	if(dir == NULL) return(-error);
+    name = kmalloc(JLFS_MAXPATHLEN, GFP_KERNEL);
+	next = file->f_pos;
+	while(read_dir(dir, name, &next, &ino, &len) == 0){
+		error = (*filldir)(ent, name, len, file->f_pos,
+				   ino, DT_UNKNOWN);
+		if(error) break;
+		file->f_pos = next;
+	}
+	close_dir(dir);
+    kfree(name);
+	return(0);
+}
+
+int jlfs_file_open(struct inode *ino, struct file *file)
+{
+	char *name;
+	int mode = 0, r = 0, w = 0, fd;
+
+	mode = file->f_mode & (FMODE_READ | FMODE_WRITE);
+	if((mode & JLFS_I(ino)->mode) == mode)
+		return(0);
+
+	/* The file may already have been opened, but with the wrong access,
+	 * so this resets things and reopens the file with the new access.
+	 */
+	if(JLFS_I(ino)->fd != -1){
+		close_file(&JLFS_I(ino)->fd);
+		JLFS_I(ino)->fd = -1;
+	}
+
+	JLFS_I(ino)->mode |= mode;
+	if(JLFS_I(ino)->mode & FMODE_READ)
+		r = 1;
+	if(JLFS_I(ino)->mode & FMODE_WRITE)
+		w = 1;
+	if(w)
+		r = 1;
+
+	name = dentry_name(file->f_path.dentry, 0);
+	if(name == NULL)
+		return(-ENOMEM);
+	fd = open_file(name, r, w, append);
+	kfree(name);
+	if(fd < 0) return(fd);
+	FILE_JLFS_I(file)->fd = fd;
+
+	return(0);
+}
+
+static const struct file_operations jlfs_file_fops = {
+	.llseek		= generic_file_llseek,
+	.read		= do_sync_read,
+	.sendfile	= NULL,
+	.aio_read	= generic_file_aio_read,
+	.aio_write	= NULL,
+	.write		= NULL,
+	.mmap		= generic_file_mmap,
+	.open		= jlfs_file_open,
+	.release	= NULL,
+	.fsync		= NULL,
+};
+
+static const struct file_operations jlfs_dir_fops = {
+	.llseek		= generic_file_llseek,
+	.readdir	= jlfs_readdir,
+	.read		= generic_read_dir,
+};
+
+int jlfs_readpage(struct file *file, struct page *page)
+{
+	char *buffer;
+	long long start;
+	int err = 0;
+    char *name;
+
+	start = (long long) page->index << PAGE_CACHE_SHIFT;
+	buffer = kmap(page);
+	name = dentry_name(file->f_path.dentry, 0);
+	if(name == NULL)
+		return(-ENOMEM);
+	err = read_file(name, FILE_JLFS_I(file)->fd, &start, buffer,
+			PAGE_CACHE_SIZE);
+	kfree(name);
+	if(err < 0) goto out;
+
+	memset(&buffer[err], 0, PAGE_CACHE_SIZE - err);
+    //printk (KERN_INFO "jlfs_readpage: got bytes %d %d %d %d", buffer[0], buffer[1], buffer[2], buffer[3]);
+
+	flush_dcache_page(page);
+	SetPageUptodate(page);
+	if (PageError(page)) ClearPageError(page);
+	err = 0;
+ out:
+	kunmap(page);
+	unlock_page(page);
+	return(err);
+}
+
+static const struct address_space_operations jlfs_aops = {
+	.writepage 	= NULL,
+	.readpage	= jlfs_readpage,
+	.set_page_dirty = NULL,
+	.prepare_write	= NULL,
+	.commit_write	= NULL
+};
+
+static int init_inode(struct inode *inode, struct dentry *dentry)
+{
+	char *name;
+	int type = 0, err = -ENOMEM;
+
+	if (dentry) {
+		name = dentry_name(dentry, 0);
+		if(name == NULL) {
+			goto out;
+        }
+        if (strcmp(name, "/") == 0) {
+            type = 1;
+        }
+		kfree(name);
+	} else {
+        type = 1;
+    }
+
+    if (type == 1) { /* Directory */
+        inode->i_op = &jlfs_dir_iops;
+        inode->i_fop = &jlfs_dir_fops;
+    } else { /* Regular file */
+        inode->i_op = &jlfs_iops;
+        inode->i_fop = &jlfs_file_fops;
+    }
+    inode->i_mapping->a_ops = &jlfs_aops;
+    err = 0;
+
+ out:
+	return err;
+}
+
+struct dentry *jlfs_lookup(struct inode *ino, struct dentry *dentry,
+                            struct nameidata *nd)
+{
+	struct inode *inode;
+	char *name;
+	int err;
+
+	err = -ENOMEM;
+	inode = iget(ino->i_sb, 0);
+	if(inode == NULL)
+		goto out;
+
+	err = init_inode(inode, dentry);
+	if(err)
+		goto out_put;
+
+	err = -ENOMEM;
+	name = dentry_name(dentry, 0);
+	if(name == NULL)
+		goto out_put;
+	err = read_name(inode, name);
+	kfree(name);
+	if(err == -ENOENT){
+		iput(inode);
+		inode = NULL;
+	}
+	else if(err)
+		goto out_put;
+
+	d_add(dentry, inode);
+	dentry->d_op = &jlfs_dentry_ops;
+	return(NULL);
+
+ out_put:
+	iput(inode);
+ out:
+	return(ERR_PTR(err));
+}
+
+int jlfs_permission(struct inode *ino, int desired, struct nameidata *nd)
+{
+	char *name;
+	int r = 0, w = 0, x = 0, err;
+
+	if (desired & MAY_READ) r = 1;
+	if (desired & MAY_WRITE) w = 1;
+	if (desired & MAY_EXEC) x = 1;
+	name = inode_name(ino, 0);
+	if (name == NULL) return(-ENOMEM);
+
+	if (S_ISCHR(ino->i_mode) || S_ISBLK(ino->i_mode) ||
+			S_ISFIFO(ino->i_mode) || S_ISSOCK(ino->i_mode))
+		err = 0;
+	else
+		err = access_file(name, r, w, x);
+	kfree(name);
+	if(!err)
+		err = generic_permission(ino, desired, NULL);
+	return err;
+}
+
+int jlfs_getattr(struct vfsmount *mnt, struct dentry *dentry,
+	   struct kstat *stat)
+{
+	generic_fillattr(dentry->d_inode, stat);
+	return(0);
+}
+
+static struct inode_operations jlfs_iops = {
+	.create		= NULL,
+	.link		= NULL,
+	.unlink		= NULL,
+	.symlink	= NULL,
+	.mkdir		= NULL,
+	.rmdir		= NULL,
+	.mknod		= NULL,
+	.rename		= NULL,
+	.permission	= jlfs_permission,
+	.setattr	= NULL,
+	.getattr	= jlfs_getattr,
+};
+
+static struct inode_operations jlfs_dir_iops = {
+	.create		= NULL,
+	.lookup		= jlfs_lookup,
+	.link		= NULL,
+	.unlink		= NULL,
+	.symlink	= NULL,
+	.mkdir		= NULL,
+	.rmdir		= NULL,
+	.mknod		= NULL,
+	.rename		= NULL,
+	.permission	= jlfs_permission,
+	.setattr	= NULL,
+	.getattr	= jlfs_getattr,
+};
+
+static int jlfs_fill_sb_common(struct super_block *sb, void *d, int silent)
+{
+	struct inode *root_inode;
+	char *name, *data = d;
+	int err;
+
+
+	sb->s_blocksize = 1024;
+	sb->s_blocksize_bits = 10;
+    sb->s_maxbytes = JLFS_MAX_FILESIZE;
+	sb->s_magic = JLFS_SUPER_MAGIC;
+	sb->s_op = &jlfs_sbops;
+
+	if((data == NULL) || (*data == '\0'))
+		data = root_ino;
+
+	err = -ENOMEM;
+	name = kmalloc(strlen(data) + 1, GFP_KERNEL);
+	if(name == NULL)
+		goto out;
+
+	strcpy(name, data);
+
+	root_inode = iget(sb, 0);
+	if(root_inode == NULL)
+		goto out_free;
+
+	err = init_inode(root_inode, NULL);
+	if(err)
+		goto out_put;
+
+	JLFS_I(root_inode)->host_filename = name;
+
+	err = -ENOMEM;
+	sb->s_root = d_alloc_root(root_inode);
+	if(sb->s_root == NULL)
+		goto out_put;
+
+	err = read_inode(root_inode);
+	if(err){
+                /* No iput in this case because the dput does that for us */
+                dput(sb->s_root);
+                sb->s_root = NULL;
+		goto out_free;
+        }
+
+	return(0);
+
+ out_put:
+        iput(root_inode);
+ out_free:
+	kfree(name);
+ out:
+	return(err);
+}
+
+static int jlfs_read_sb(struct file_system_type *type,
+			  int flags, const char *dev_name,
+			  void *data, struct vfsmount *mnt)
+{
+    printk(KERN_INFO "jlfs_read_sb");
+	return get_sb_nodev(type, flags, data, jlfs_fill_sb_common, mnt);
+}
+
+static struct file_system_type jlfs_type = {
+	.owner 		= THIS_MODULE,
+	.name 		= "jlfs",
+	.get_sb 	= jlfs_read_sb,
+	.kill_sb	= kill_anon_super,
+	.fs_flags 	= 0,
+};
+
+static int __init init_jlfs(void)
+{
+    if (init_jlfs_backend()) {
+        return -1;
+    }
+	return register_filesystem(&jlfs_type);
+}
+
+static void __exit exit_jlfs(void)
+{
+    deinit_jlfs_backend();
+	unregister_filesystem(&jlfs_type);
+}
+
+module_init(init_jlfs)
+module_exit(exit_jlfs)
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Coriolis Technologies Pvt Ltd");
+
+/*
+ * Overrides for Emacs so that we follow Linus's tabbing style.
+ * Emacs will notice this stuff at the end of the file and automatically
+ * adjust the settings for this buffer only.  This must remain at the end
+ * of the file.
+ * ---------------------------------------------------------------------------
+ * Local variables:
+ * c-file-style: "linux"
+ * End:
+ */
